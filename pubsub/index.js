
const Web3 = require('web3');
const Jimp = require('jimp');

// Generated by migrations
const PixelsContract = require('../build/contracts/Pixels.json');
const dappConfig = require('../dapp-config.json');

const web3Instance = new Web3(dappConfig.wsUrl);
const pixelsContract = new web3Instance.eth.Contract(
  PixelsContract.abi,
  dappConfig.PixelsAddress
);

(async () => {
  console.log('Init Image Listener!');

  const imagePath = '../assets/images/world.png';
  let worldImage;

  try {
    worldImage = await Jimp.read(imagePath);
  } catch (error) {
    console.error('Failed to load worldImage', error);
  }

  pixelsContract.events.ColorPixels({ fromBlock: web3Instance.eth.blockNumber })
    .on('data', e => {
      console.log('ColorPixels event triggered');

      try {
        const positions = e.returnValues._positions;
        const colors = e.returnValues._colors;

        if (positions.length > 0) {
          positions.forEach((position, pindex) => {
            const positionString = Web3.utils.hexToUtf8(Web3.utils.numberToHex(position)),
              colorString = Web3.utils.hexToUtf8(colors[pindex]),
              colorInt = parseInt(colorString + 'ff', 16),
              positionInfo = formatPosition(positionString);

            console.log('position', positionString);
            console.log('positionInfo', positionInfo, positionInfo.x, positionInfo.y);
            console.log('colorString', colorString);
            console.log('colorInt', colorInt);

            worldImage.setPixelColor(colorInt, positionInfo.x, positionInfo.y);
          })

          worldImage.write(imagePath);
          console.log('World image pixels updated!');
        }
      } catch (error) {
        console.error('Failed to update World Image pixels', error);
      }
    })
    .on('changed', e => {
      console.log('ColorPixels changed', e);
    })
    .on('error', error => {
      console.error('ColorPixels event error', error);
    });

})();


// Needs refractor, copy of client/helpers
function formatPosition(string) {
  let y = string.match(/[A-Z]/g);

  if (!y)
    y = 0
  else
    y = letterToNumberColumn(y.join(''));

  let x = string.match(/[^A-Z]/gi);

  if (!x)
    x = 0
  else
    x = parseInt(x.join(''));

  return {
    string,
    x,
    y
  }

  function letterToNumberColumn(columnLetter) {
    let base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', i, j, columnNumber = 0;

    for (i = 0, j = columnLetter.length - 1; i < columnLetter.length; i += 1, j -= 1)
      columnNumber += Math.pow(base.length, j) * (base.indexOf(columnLetter[i]) + 1);

    return columnNumber;
  };
}


