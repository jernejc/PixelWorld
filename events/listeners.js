
const Web3 = require('web3');

// Local helpers
const { colorPixel, updateWorldImage, loadWorldImage } = require('./helpers');
// Infura client
const ipfs = require('./ipfs');
// Generated by migrations
const PixelsABI = require('./abis/Pixels.json');
// Config
const config = require('./config');

const web3Instance = new Web3(config.wsUrl);
const pixelsContract = new web3Instance.eth.Contract(
  PixelsABI,
  config.PixelsAddress
);

/**
 * 
 * Pixels Contract
 * 
 * Subscribe to ColorPixels
 * Needs better event handling
 * 
 */

module.exports = {
  pixelsContractListeners
}

async function pixelsContractListeners() {
  pixelsContract.events.ColorPixels({ fromBlock: 'earliest' })
    .on('data', async e => {
      console.log('ColorPixels event triggered.');

      const worldImage = await loadWorldImage();

      try {
        const positions = e.returnValues._positions;
        const colors = e.returnValues._colors;

        let updateWorld = false;

        if (positions.length > 0) {
          positions.forEach((position, pindex) => {
            const color = colors[pindex];

            if (position && color) {
              colorPixel(position, color, worldImage);
              updateWorld = true;
            }
          });

          if (updateWorld) {
            await updateWorldImage(worldImage, ipfs)
          }
        }
      } catch (error) {
        console.error('Failed to update World Image pixels', error);
      }
    })
    .on('changed', e => {
      console.log('ColorPixels changed', e);
    })
    .on('error', error => {
      console.error('ColorPixels event error', error);
    });
}